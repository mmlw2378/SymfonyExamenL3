{% extends 'base.html.twig' %}

{% block title %}Hello ClientController!
{% endblock %}

{% block body %}
	<style>
		.main-content {
			display: flex;
			flex-direction: column;
		}

		.product-lists {
			display: flex;
			flex-direction: column;
			gap: 1rem;
		}

		.product-list {
			width: 100%;
		}

		@media(min-width: 768px) {
			.product-lists {
				flex-direction: row;
			}

			.product-list {
				width: 100%;
			}
		}

		/* @media () {
      .product-list {
        margin-bottom: 1rem;
      }
    } */

		.table-responsive {
			overflow-x: auto;
		}

		@media(max-width: 640px) {
			.table-responsive {
				font-size: 0.8rem;
			}
		}

		@media(max-width: 640px) {
			#clientModal {
				align-items: flex-start;
				padding-top: 1rem;
			}

			#clientModal .relative {
				max-height: 90vh;
				overflow-y: auto;
			}
		}
		.toggle-switch {
			position: relative;
			display: inline-block;
			width: 50px;
			height: 24px;
		}

		.toggle-switch input {
			opacity: 0;
			width: 0;
			height: 0;
		}

		.slider {
			position: absolute;
			cursor: pointer;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background-color: #ccc;
			transition: 0.4s;
			border-radius: 24px;
		}

		.slider:before {
			position: absolute;
			content: "";
			height: 20px;
			width: 20px;
			left: 2px;
			bottom: 2px;
			background-color: white;
			transition: 0.4s;
			border-radius: 50%;
		}

		input:checked+.slider {
			background-color: #2563eb;
		}

		input:checked+.slider:before {
			transform: translateX(26px);
		}

		.input-shadow {
			box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
		}
	</style>

	<main class="mt-8 mx-4 md:mr-8 rounded-xl bg-white p-4 shadow-sm flex flex-col main-content">
		<div class="product-lists">
			<div class="product-list bg-white rounded-lg shadow p-4 w-full">
				<div class="mb-4 text-xl font-bold text-black">
					Lister Clients
				</div>
				<!-- Header -->

				<!-- Filter and New Client Button -->
				<div
					class="flex flex-wrap justify-between items-center mb-4">
					<!-- Filter by Phone -->
					<div class="flex items-center space-x-2">
						<form method="get" action="{{ path('app_client') }}" class="flex space-x-2">
							<input type="text" name="phone" value="{{ phone|default('') }}" placeholder="Filtrer par Téléphone" class="p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none w-2/3"/>
							<button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
								OK
							</button>
						</form>
					</div>
					<!-- New Client Button -->
					<div class="flex gap-4">
						<button data-modal-target="clientModal" data-modal-toggle="clientModal" class="px-4 py-2 bg-blue-600 text-white rounded-md shadow hover:bg-blue-700 mt-2 sm:mt-0">
							Nouveau Client
						</button>
					</div>
				</div>
				<div class="overflow-x-auto">
					<table class="min-w-full">
						<thead class="bg-blue-600 text-white">
							<tr>
								<th class="px-6 py-3 text-center">PRENOM ET NOM</th>
								<th class="px-6 py-3 text-center">TELEPHONE</th>
								<th class="px-6 py-3 text-center">ADRESSE</th>
								<th class="px-6 py-3 text-center">MONTANT DUE</th>
								<th class="px-6 py-3 text-center">ACTION</th>
							</tr>
						</thead>
						<tbody class="text-gray-700">
							{% for client in clients %}
								<tr class="border-t">
									<td class="px-6 py-4 text-center">{{ client.prenom }}
										{{ client.nom }}</td>
									<td class="px-6 py-4 text-center">{{ client.telephone }}</td>
									<td class="px-6 py-4 text-center">{{ client.adresse }}</td>
									<td class="px-6 py-4 text-center">{{ client.montantDette }}
										FCFA</td>
									{% if client and client.id and client.telephone %}
										<td class="px-6 py-4 text-center">
											<button class="px-4 py-2 bg-blue-500 text-white rounded-md shadow hover:bg-blue-600 details-btn" data-telephone="{{ client.telephone }}" data-id="{{ client.id }}">
												Détails
											</button>
										</td>
									{% endif %}

								</tr>
							{% endfor %}
						</tbody>
					</tbody>
				</table>
			</div>
			<div
				class="flex justify-end mt-4 mb-2 sm:mb-0 space-x-2">
				<!-- Bouton Précédent -->
				{% if currentPage > 1 %}
					<a href="?page={{ currentPage - 1 }}">
						<button class="px-3 py-1 bg-gray-300 rounded-md shadow hover:bg-gray-400">
							&lt;
						</button>
					</a>
				{% else %}
					<button class="px-3 py-1 bg-gray-300 rounded-md shadow opacity-50 cursor-not-allowed">
						&lt;
					</button>
				{% endif %}

				<!-- Boutons pour les pages -->
				{% for i in 1..pagesCount %}
					<a href="?page={{ i }}">
						<button class="px-3 py-1 rounded-md shadow
																																																																																																				                {% if i == currentPage %}
																																																																																																				                    bg-blue-500 text-white hover:bg-blue-600
																																																																																																				                {% else %}
																																																																																																				                    bg-gray-300 hover:bg-gray-400
																																																																																																				                {% endif %}">
							{{ i }}
						</button>
					</a>
				{% endfor %}

				<!-- Bouton Suivant -->
				{% if currentPage < pagesCount %}
					<a href="?page={{ currentPage + 1 }}">
						<button class="px-3 py-1 bg-gray-300 rounded-md shadow hover:bg-gray-400">
							&gt;
						</button>
					</a>
				{% else %}
					<button class="px-3 py-1 bg-gray-300 rounded-md shadow opacity-50 cursor-not-allowed">
						&gt;
					</button>
				{% endif %}
			</div>

		</div>
	</div>
</main></div></div><div id="clientModal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 w-full md:inset-0 h-modal md:h-full"><div class="relative w-full max-w-[95%] sm:max-w-2xl h-full md:h-auto">
<div class="relative bg-white rounded-lg shadow pt-10 px-4 pb-4 w-full max-w-[95%] sm:max-w-2xl mx-auto">
	<button type="button" class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center" data-modal-hide="clientModal">
		<svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
		</svg>
	</button>
	<h3 class="mb-4 text-lg font-normal text-gray-500">Creer un client</h3>
	<div class="p-6 text-center border rounded-xl">
		<form method="POST" action="#" enctype="multipart/form-data" class="space-y-6 p-4">
			<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
				<label for="nom" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
					<i class="fas fa-user mr-2"></i>Nom
				</label>
				<input type="text" id="nom" name="nom" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
			</div>
			<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
				<label for="prenom" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
					<i class="fas fa-user mr-2"></i>Prénom
				</label>
				<input type="text" id="prenom" name="prenom" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
			</div>
			<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
				<label for="telephone" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
					<i class="fas fa-phone mr-2"></i>Téléphone
				</label>
				<input type="tel" id="telephone" name="telephone" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
			</div>
			<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
				<label for="adresse" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
					<i class="fas fa-map-marker-alt mr-2"></i>Adresse
				</label>
				<input type="text" id="adresse" name="adresse" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
			</div>
			<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
				<label for="photo" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
					<i class="fas fa-camera mr-2"></i>Photo
				</label>
				<input type="file" id="photo" name="photo" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
			</div>

			<!-- Toggle pour Création de Compte -->
			<div class="flex items-center justify-start gap-2">
				<span class="font-semibold text-gray-700">Créer un compte :</span>
				<div class="flex items-center">
					<label class="toggle-switch">
						<input type="checkbox" id="creerCompte" class="sr-only" onchange="toggleAccountFields()"/>
						<span class="slider"></span>
					</label>
					<span class="ml-2 text-gray-700 font-semibold" id="toggleLabel">Non</span>
				</div>
			</div>

			<!-- Champs Supplémentaires pour la Création de Compte -->
			<div
				id="accountFields" class="hidden space-y-6 mt-4">
				<!-- Champ Login -->
				<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
					<label for="login" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
						<i class="fas fa-envelope mr-2"></i>Login
					</label>
					<input type="text" id="login" name="login" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
				</div>

				<!-- Champ Password -->
				<div class="form-row flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2 mb-4">
					<label for="password" class="w-full sm:w-1/4 font-semibold text-gray-700 flex items-center">
						<i class="fas fa-lock mr-2"></i>Password
					</label>
					<input type="password" id="password" name="password" class="input-shadow w-full sm:flex-grow p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"/>
				</div>
			</div>

			<div class="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-6">
				<button type="reset" class="w-full sm:w-auto bg-red-600 text-white font-bold py-2 px-4 rounded-md hover:bg-red-700 flex items-center justify-center">
					<i class="fas fa-times mr-2"></i>Annuler
				</button>
				<button type="submit" class="w-full sm:w-auto bg-blue-600 text-white font-bold py-2 px-4 rounded-md hover:bg-blue-700 flex items-center justify-center">
					<i class="fas fa-save mr-2"></i>Enregistrer
				</button>
			</div>
		</form>
	</div>
</div>
<script>
					document.addEventListener("DOMContentLoaded", function () {
					const creerCompteToggle = document.getElementById('creerCompte');
					const accountFields = document.getElementById('accountFields');
					const toggleLabel = document.getElementById('toggleLabel');

					creerCompteToggle ?. addEventListener('change', function () {
					if (this.checked) {
					accountFields.classList.remove('hidden');
					toggleLabel.textContent = 'Oui';
					} else {
					accountFields.classList.add('hidden');
					toggleLabel.textContent = 'Non';
					}
					});
					});


					document.addEventListener('DOMContentLoaded', () => {
					const clientForm = document.querySelector('#clientModal form');
					const clientTableBody = document.querySelector('table tbody');

					// Fonction pour récupérer les clients stockés dans le localStorage
					function loadClients() {
					const clients = JSON.parse(localStorage.getItem('clients')) || [];
					clients.forEach(client => {
					addClientToTable(client);
					});
					}

					// Fonction pour ajouter un client dans la table
					function addClientToTable(client) {
					const newRow = document.createElement('tr');
					newRow.classList.add('border-t');
					newRow.innerHTML = `
								<td class="px-6 py-4 text-center">${
					client.prenom
					} ${
					client.nom
					}</td>
								<td class="px-6 py-4 text-center">${
					client.telephone
					}</td>
								<td class="px-6 py-4 text-center">${
					client.adresse
					}</td>
								<td class="px-6 py-4 text-center">0 FCFA</td>
								<td class="px-6 py-4 text-center">
									<button class="px-4 py-2 bg-blue-500 text-white rounded-md shadow hover:bg-blue-600 details-btn" data-telephone="${
					client.telephone
					}">
										Détails
									</button>
								</td>
							`;
					clientTableBody.appendChild(newRow);
					}

					// Charger les clients existants dans le localStorage lorsque la page est chargée
					loadClients();

					// Gestion du formulaire de création de client
					clientForm.addEventListener('submit', (event) => {
					event.preventDefault();

					// Récupérer les valeurs des champs du formulaire
					const nom = document.querySelector('#nom').value.trim();
					const prenom = document.querySelector('#prenom').value.trim();
					const telephone = document.querySelector('#telephone').value.trim();
					const adresse = document.querySelector('#adresse').value.trim();

					// Vérification de validité des champs
					if (! nom || ! prenom || ! telephone || ! adresse) {
					alert('Veuillez remplir tous les champs.');
					return;
					}

					// Créer un objet client
					const client = {
					nom,
					prenom,
					telephone,
					adresse
					};

					// Ajouter le client à la table
					addClientToTable(client);

					// Sauvegarder le client dans le localStorage
					const clients = JSON.parse(localStorage.getItem('clients')) || [];
					clients.push(client);
					localStorage.setItem('clients', JSON.stringify(clients));

					// Réinitialiser le formulaire et fermer le modal
					clientForm.reset();
					document.querySelector('[data-modal-hide="clientModal"]').click();
					});

					// Gestion du clic sur le bouton Détails (non fonctionnel dans cet exemple, mais vous pouvez l'implémenter)
					clientTableBody.addEventListener('click', (event) => {
					if (event.target.classList.contains('details-btn')) {
					const telephone = event.target.getAttribute('data-telephone');
					const idDette = event.target.getAttribute('data-id');

					// Redirige vers la page des dettes du client avec l'ID en paramètre
					window.location.href = `/dette/${telephone}?id=${idDette}`;
					}
					});


					});


					// Gestion du toggle pour création de compte
					function toggleAccountFields() {
					const accountFields = document.getElementById('accountFields');
					const toggleLabel = document.getElementById('toggleLabel');
					const isChecked = document.getElementById('creerCompte').checked;

					if (isChecked) {
					accountFields.classList.remove('hidden');
					toggleLabel.textContent = 'Oui';
					} else {
					accountFields.classList.add('hidden');
					toggleLabel.textContent = 'Non';
					}
					}
					</script>{% endblock %}
