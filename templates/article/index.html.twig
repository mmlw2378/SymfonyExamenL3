{% extends 'base.html.twig' %}

{% block title %}Hello ArticleController!
{% endblock %}

{% block body %}
	<style>
		.main-content {
			display: flex;
			flex-direction: column;
		}

		.product-lists {
			display: flex;
			flex-direction: column;
			gap: 1rem;
		}

		.product-list {
			width: 100%;
		}

		@media(min-width: 768px) {
			.product-lists {
				flex-direction: row;
			}

			.product-list {
				width: 50%;
			}
		}

		@media(max-width: 767px) {
			.product-list {
				margin-bottom: 1rem;
			}
		}

		.table-responsive {
			overflow-x: auto;
		}

		@media(max-width: 640px) {
			.table-responsive {
				font-size: 0.8rem;
			}
		}
	</style>

	<main class="mt-8 mx-4 md:mr-8 rounded-xl bg-white p-4 shadow-sm flex flex-col main-content">
		<div class="mb-4 flex justify-between flex-wrap">
			<span class="text-gray-600 text-xl font-bold mb-2 sm:mb-0">Approvisionnement</span>
			<button class="bg-blue-500 text-white px-4 py-2 rounded" data-modal-target="articleModal" data-modal-toggle="articleModal" id="openArticleModal" >Nouvelle Article</button>
		</div>
		<div class="product-lists">
			<div class="product-list bg-white rounded-lg shadow p-4 mb-4">
				<h2 class="text-2xl font-bold mb-4">Lister les produits</h2>
				<div class="mb-4 flex flex-wrap gap-2">
					<a href="{{ path('app_article', {'filter': 'rup'}) }}" class="px-4 py-2 {{ filter == 'rup' ? 'bg-red-500 text-white' : 'bg-gray-300 text-gray-700' }}">
						RUP
					</a>
					<a href="{{ path('app_article', {'filter': 'dis'}) }}" class="px-4 py-2 {{ filter == 'dis' ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-700' }}">
						DIS
					</a>
					<a href="{{ path('app_article', {'filter': 'all'}) }}" class="px-4 py-2 {{ filter == 'all' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-700' }}">
						ALL
					</a>
				</div>

				<div class="flex mb-4 flex-wrap">
					<form method="get" action="{{ path('app_article', { filter: filter }) }}" class="flex w-full">
						<input type="text" name="search" placeholder="Rechercher un article..." value="{{ search }}" class="border rounded px-4 py-2 w-3/4">
						<button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded ml-4">OK</button>
					</form>
				</div>
				<div class="overflow-x-auto">
					<table class="w-full" id="product-table">
						<thead>
							<tr class="bg-blue-500 text-white">
								<th class="p-2 text-center">
									<input type="checkbox" id="select-all" onclick="toggleAllCheckboxes()">
								</th>
								<th class="py-2 px-4 text-center">Article</th>
								<th class="py-2 px-4 text-center">Prix</th>
								<th class="py-2 px-4 text-center">Qte en stock</th>
							</tr>
						</thead>
						<tbody>
							{% for article in articles %}
								<tr>
									<td class="p-2 text-center">
										<input type="checkbox" class="product-checkbox" data-id="{{ article.id }}" data-name="{{ article.nomArticle }}" data-price="{{ article.prix }}" data-stock="{{ article.quantiteRestante }}" onclick="updateSelectedProducts()">

									</td>
									<td class="py-2 px-4 text-center">{{ article.nomArticle }}</td>
									<td class="py-2 px-4 text-center">{{ article.prix }}</td>
									<td class="py-2 px-4 text-center">{{ article.quantiteRestante }}</td>
								</tr>
							{% else %}
								<tr>
									<td colspan="4" class="py-2 px-4 text-center">Aucun article disponible.</td>
								</tr>
							{% endfor %}
						</tbody>
					</table>

				</div>
				<div class="flex justify-center mt-4">
					{% if currentPage > 1 %}
						<a href="{{ path('app_article', { filter: filter, search: search, page: currentPage - 1 }) }}" class="px-3 py-1 border rounded mr-1">&lt;</a>
					{% endif %}

					{% for page in 1..totalPages %}
						<a href="{{ path('app_article', { filter: filter, search: search, page: page }) }}" class="px-3 py-1 border rounded mr-1 {{ page == currentPage ? 'bg-blue-500 text-white' : '' }}">{{ page }}</a>
					{% endfor %}

					{% if currentPage < totalPages %}
						<a href="{{ path('app_article', { filter: filter, search: search, page: currentPage + 1 }) }}" class="px-3 py-1 border rounded">&gt;</a>
					{% endif %}
				</div>
			</div>
			<div class="product-list bg-white rounded-lg shadow p-4">
				<div class="flex justify-between items-center mb-4 flex-wrap">
					<h3 class="text-xl font-bold mb-2 sm:mb-0">Liste de produits selectionné</h3>
				</div>
				<div class="mb-4">
					<label class="block mb-2">Total:</label>
					<input type="text" id="total-price" class="border rounded px-4 py-2 w-full readonly">
				</div>
				<div class="overflow-x-auto">
					<table class="w-full" id="selected-products-table">
						<thead>
							<tr class="bg-blue-500 text-white">
								<th class="py-2 px-4 text-center">ARTICLE</th>
								<th class="py-2 px-4 text-center">PRIX</th>
								<th class="py-2 px-4 text-center">QUANTITÉ</th>
								<th class="py-2 px-4 text-center">ACTION</th>
							</tr>
						</thead>
						<tbody id="selected-products-body"></tbody>
					</table>
				</div>
				<div class="w-full h-12 flex justify-between mt-4 flex-wrap">
					<div class="flex justify-center mt-4 mb-2 sm:mb-0">
            <button class="px-3 py-1 border rounded mr-1" onclick="goToPage(currentPage - 1)">&lt;</button>
            <button class="px-3 py-1 border rounded mr-1 bg-blue-500 text-white" id="page-1" onclick="goToPage(1)">1</button>
            <button class="px-3 py-1 border rounded mr-1" id="page-2" onclick="goToPage(2)">2</button>
            <button class="px-3 py-1 border rounded" onclick="goToPage(currentPage + 1)">&gt;</button>
        </div>
					<button class="bg-blue-500 text-white px-3 rounded mt-2 sm:mt-0" onclick="saveSelectedProducts()">SAVE</button>
				</div>
			</div>
		</div>
	</main>
</div></div><!-- Popup Modal (version mise à jour) --><div id="articleModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto h-full bg-black bg-opacity-50">
<div
	class="relative w-full h-full flex items-center justify-center">
	<!-- Modal content -->
	<div
		class="bg-white rounded-lg shadow relative w-1/3 modal-content">
		<!-- Modal header -->
		<div class="flex justify-between items-center p-4 border-b rounded-t">
			<h3 class="text-xl font-semibold text-gray-900">Nouvel Article</h3>
			<button id="closeModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center" data-modal-hide="articleModal">
				<svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
				</svg>
			</button>
		</div>
		<!-- Modal body -->
		<div class="p-6 space-y-6 modal-body">
			<h3 class="mt-6 text-gray-700">Creer un article</h3>
			<div class="mb-4">
				<label for="libelle" class="block text-sm font-medium text-gray-700">Libellé</label>
				<input type="text" id="libelle" class="block w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
			</div>
			<div class="mb-4">
				<label for="prixUnitaire" class="block text-sm font-medium text-gray-700">Prix Unitaire</label>
				<input type="number" id="prixUnitaire" class="block w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
			</div>
			<div class="mb-4">
				<label for="quantite" class="block text-sm font-medium text-gray-700">Quantité</label>
				<input type="number" id="quantite" class="block w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
			</div>
			<div class="mb-4">
				<label for="prixDetails" class="block text-sm font-medium text-gray-700">Prix Details</label>
				<input type="number" id="prixDetails" class="block w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
			</div>
			<div class="mb-4">
				<label for="categories" class="block text-sm font-medium text-gray-700">Categories</label>
				<select class="block w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" id="categories">
					<option value="alimentaire">Alimentaire</option>
					<option value="cosmetique">Cosmetique</option>
					<option value="electronique">Electronique</option>
				</select>
			</div>
			<div class="mb-4">
				<label for="promotion" class="block text-sm font-medium text-gray-700">Promotion</label>
				<input type="text" id="promotion" class="block w-full p-2.5 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
			</div>
		</div>
		<!-- Modal footer -->
		<div class="flex justify-end p-6 space-x-2 border-t modal-footer">
			<button data-modal-hide="articleModal" type="button" class="text-white bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 rounded-lg text-sm px-5 py-2.5 w-full sm:w-auto" id="cancelBtn">Annuler</button>
			<button type="button" class="text-white bg-blue-500 hover:bg-blue-600 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg text-sm px-5 py-2.5 w-full sm:w-auto" id="submit-article">Enregistrer</button>
		</div>
	</div>
</div></div><script>

let selectedProducts = [];
let currentPage = 1;
const productsPerPage = 5; // Nombre de produits par page

function updateSelectedProducts() {
    const checkboxes = document.querySelectorAll('.product-checkbox');
    selectedProducts = [];

    checkboxes.forEach((checkbox) => {
        if (checkbox.checked) {
            const product = {
                id: checkbox.dataset.id,
                name: checkbox.dataset.name,
                price: parseFloat(checkbox.dataset.price),
                quantity: 1
            };
            selectedProducts.push(product);
        }
    });

    renderSelectedProducts();
	    updateTotalPrice();

}

function updateTotalPrice() {
    let totalPrice = 0;
    // Loop through selected products and calculate the total price
    selectedProducts.forEach(product => {
        totalPrice += product.price * product.quantity;
    });
    // Update the total price display
    document.getElementById('total-price').value = totalPrice.toFixed(2);
}


function renderSelectedProducts() {
    const tbody = document.getElementById('selected-products-body');
    tbody.innerHTML = '';
    let totalPrice = 0;

    // Calculer l'index des produits à afficher en fonction de la page actuelle
    const startIndex = (currentPage - 1) * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    const pageProducts = selectedProducts.slice(startIndex, endIndex);

    pageProducts.forEach((product, index) => {
        const row = document.createElement('tr');

        row.innerHTML = `
            <td class="py-2 px-4 text-center">${product.name}</td>
            <td class="py-2 px-4 text-center">${product.price}</td>
            <td class="py-2 px-4 text-center">
                <button class="px-2 py-1 border rounded" onclick="changeQuantity(${startIndex + index}, -1)">-</button>
                <span class="mx-2">${product.quantity}</span>
                <button class="px-2 py-1 border rounded" onclick="changeQuantity(${startIndex + index}, 1)">+</button>
            </td>
            <td class="py-2 px-4 text-center">
                <button class="text-red-500" onclick="removeProduct(${startIndex + index})">
                    <i class="fas fa-trash"></i>
                    Supprimer
                </button>
            </td>
        `;
        tbody.appendChild(row);
        totalPrice += product.price * product.quantity;
    });

    document.getElementById('total-price').value = totalPrice;
    updatePagination();
}

function changeQuantity(index, delta) {
    const product = selectedProducts[index];
    product.quantity += delta;
    if (product.quantity < 1) product.quantity = 1;

    renderSelectedProducts();
}

function removeProduct(index) {
    selectedProducts.splice(index, 1);
    renderSelectedProducts();
}

function saveSelectedProducts() {
    if (selectedProducts.length > 0) {
        // Sauvegarder les produits dans le localStorage
        localStorage.setItem('selectedProducts', JSON.stringify(selectedProducts));

        // Afficher un message de succès
        alert('Les produits ont été sauvegardés dans le localStorage !');
    } else {
        alert('Aucun produit sélectionné.');
    }
}

function updatePagination() {
    const totalPages = Math.ceil(selectedProducts.length / productsPerPage);

    // Désactiver les boutons si nécessaire
    document.querySelector('[onclick="goToPage(currentPage - 1)"]').disabled = currentPage === 1;
    document.querySelector('[onclick="goToPage(currentPage + 1)"]').disabled = currentPage === totalPages;

    // Mettre à jour les pages
    const pages = [1, 2]; // Ajouter plus de pages si nécessaire
    pages.forEach((pageNumber) => {
        const pageButton = document.getElementById(`page-${pageNumber}`);
        if (pageNumber <= totalPages) {
            pageButton.textContent = pageNumber;
            pageButton.disabled = false;
        } else {
            pageButton.disabled = true;
        }
    });
}

function goToPage(page) {
    const totalPages = Math.ceil(selectedProducts.length / productsPerPage);
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    renderSelectedProducts();
}

function loadProducts() {
    const savedProducts = JSON.parse(localStorage.getItem('selectedProducts')) || [];
    const productTableBody = document.querySelector("#product-table tbody");

    // Effacez le contenu actuel du tableau
    productTableBody.innerHTML = '';

    // Ajoutez les produits sauvegardés dans le tableau
    savedProducts.forEach(product => {
        const row = document.createElement('tr');

        row.innerHTML = `
            <td class="p-2 text-center">
                <input type="checkbox" class="product-checkbox" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}" data-stock="${product.stock}" onclick="updateSelectedProducts()">
            </td>
            <td class="py-2 px-4 text-center">${product.name}</td>
            <td class="py-2 px-4 text-center">${product.price}</td>
            <td class="py-2 px-4 text-center">${product.stock}</td>
        `;

        productTableBody.appendChild(row);
    });


}


// Variables
const openModalBtn = document.getElementById('openArticleModal');
const closeModalBtn = document.getElementById('closeModal');
const cancelBtn = document.getElementById('cancelBtn');
const saveBtn = document.getElementById('saveBtn');
const modal = document.getElementById('articleModal');

// Ouvrir le modal
openModalBtn.addEventListener('click', () => {
  modal.classList.remove('hidden');
});

// Fermer le modal
closeModalBtn.addEventListener('click', () => {
  modal.classList.add('hidden');
});

// Annuler
cancelBtn.addEventListener('click', () => {
  modal.classList.add('hidden');
});


document.addEventListener('DOMContentLoaded', () => {
    const saveBtn = document.getElementById('saveBtn');
    if (saveBtn) {
        saveBtn.addEventListener('click', () => {
const libelle = document.getElementById('libelle').value;
  const prixUnitaire = document.getElementById('prixUnitaire').value;
  const quantite = document.getElementById('quantite').value;
  const prixDetails = document.getElementById('prixDetails').value;
  const categorie = document.getElementById('categories').value;
  const promotion = document.getElementById('promotion').value;

  if (libelle && prixUnitaire && quantite && prixDetails && categorie) {
    // Ajouter l'article à la liste des produits (first list)
    const newProduct = {
      libelle,
      prixUnitaire,
      quantite,
      prixDetails,
      categorie,
      promotion
    };
    
    console.log('Article enregistré :', newProduct);

    // Vous pouvez ajouter ici l'article à une liste d'articles existante dans votre application

    modal.classList.add('hidden');
  } else {
    alert("Tous les champs doivent être remplis");
  }        });
    }
});



    // Fonction pour ajouter l'article créé dans la liste
    document.getElementById('submit-article').addEventListener('click', function() {
        // Récupérer les valeurs des champs
        var libelle = document.getElementById('libelle').value;
        var prixUnitaire = document.getElementById('prixUnitaire').value;
        var quantite = document.getElementById('quantite').value;
        var prixDetails = document.getElementById('prixDetails').value;
        var categories = document.getElementById('categories').value;

        // Créer une nouvelle ligne pour la table des produits
        var table = document.getElementById('product-table').getElementsByTagName('tbody')[0];
        var newRow = table.insertRow(table.rows.length);

        // Ajouter les cellules dans la nouvelle ligne
        var cell1 = newRow.insertCell(0);
        var cell2 = newRow.insertCell(1);
        var cell3 = newRow.insertCell(2);
        var cell4 = newRow.insertCell(3);

        // Remplir les cellules avec les valeurs de l'article
        cell1.innerHTML = '<input type="checkbox" class="product-checkbox" data-name="' + libelle + '" data-price="' + prixUnitaire + '" data-stock="' + quantite + '" onclick="updateSelectedProducts()">';
        cell2.innerHTML = libelle;
        cell3.innerHTML = prixUnitaire;
        cell4.innerHTML = quantite;

        // Fermer le modal après avoir ajouté l'article
        document.getElementById('articleModal').style.display = 'none';

        // Réinitialiser les champs du formulaire
        document.getElementById('libelle').value = '';
        document.getElementById('prixUnitaire').value = '';
        document.getElementById('quantite').value = '';
        document.getElementById('prixDetails').value = '';
        document.getElementById('categories').value = 'alimentaire';
    });


</script>{% endblock %}
